// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fetch = require("../src/Fetch.res.js");
var React = require("react");
var Assert = require("./utils/Assert.res.js");
var ReactTest = require("./utils/ReactTest.res.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Option = require("@rescript/core/src/Core__Option.res.js");
var JsxRuntime = require("react/jsx-runtime");
var React$1 = require("@testing-library/react");

var placeholderText = "{\"userId\":1,\"id\":1,\"title\":\"delectus aut autem\",\"completed\":false}";

var postPlaceholderText = "{\"title\":\"foo\",\"body\":\"bar\",\"userId\":1,\"id\":101}";

function useFetch() {
  var match = React.useState(function () {
        
      });
  var setState = match[1];
  React.useEffect((function () {
          var promise = async function () {
            var response = await fetch("https://jsonplaceholder.typicode.com/todos/1");
            var body = await response.json();
            return setState(function (param) {
                        return body;
                      });
          };
          promise().then(function () {
                
              });
        }), []);
  return match[0];
}

function useFetchWithInit() {
  var match = React.useState(function () {
        
      });
  var setState = match[1];
  React.useEffect((function () {
          var promise = async function () {
            var response = await fetch("https://jsonplaceholder.typicode.com/todos/1", Fetch.RequestInit.make("Get", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined));
            var body = await response.json();
            return setState(function (param) {
                        return body;
                      });
          };
          promise().then(function () {
                
              });
        }), []);
  return match[0];
}

function usePostFetchWithInit() {
  var postBody = {
    title: "foo",
    body: "bar",
    userId: 1
  };
  var match = React.useState(function () {
        
      });
  var setState = match[1];
  React.useEffect((function () {
          var promise = async function () {
            var body = Core__Option.getOr(JSON.stringify(postBody), "");
            var headers = [
              [
                "Accept",
                "application/json"
              ],
              [
                "Content-Type",
                "application/json"
              ]
            ];
            var response = await fetch("https://jsonplaceholder.typicode.com/posts", Fetch.RequestInit.make("Post", Caml_option.some(headers), Caml_option.some(body), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined));
            var body$1 = await response.json();
            return setState(function (param) {
                        return body$1;
                      });
          };
          promise().then(function () {
                
              });
        }), []);
  return match[0];
}

var Hooks = {
  useFetch: useFetch,
  useFetchWithInit: useFetchWithInit,
  usePostFetchWithInit: usePostFetchWithInit
};

function FetchTest$Home(props) {
  var jsonPlaceholder = props.fetchHok();
  return JsxRuntime.jsx("div", {
              children: Core__Option.mapOr(jsonPlaceholder, "Loading...", (function (__x) {
                      return JSON.stringify(__x);
                    })),
              id: "placeholder"
            });
}

var Home = {
  make: FetchTest$Home
};

ReactTest.testAsyncWithReact("fetch", undefined, (function (root, done) {
        var promise = async function () {
          await React$1.act(async function () {
                root.render(JsxRuntime.jsx(FetchTest$Home, {
                          fetchHok: useFetch
                        }));
              });
          await React$1.screen.findByText(placeholderText);
        };
        promise().then(function () {
              Assert.elementContains("has result", Caml_option.nullable_to_opt(document.querySelector("#placeholder")), placeholderText);
              done(undefined, undefined);
            });
      }));

ReactTest.testAsyncWithReact("fetchWithInit", undefined, (function (root, done) {
        var promise = async function () {
          await React$1.act(async function () {
                root.render(JsxRuntime.jsx(FetchTest$Home, {
                          fetchHok: useFetchWithInit
                        }));
              });
          await React$1.screen.findByText(placeholderText);
        };
        promise().then(function () {
              Assert.elementContains("has result", Caml_option.nullable_to_opt(document.querySelector("#placeholder")), placeholderText);
              done(undefined, undefined);
            });
      }));

ReactTest.testAsyncWithReact("postFetchWithInit", undefined, (function (root, done) {
        var promise = async function () {
          await React$1.act(async function () {
                root.render(JsxRuntime.jsx(FetchTest$Home, {
                          fetchHok: usePostFetchWithInit
                        }));
              });
          await React$1.screen.findByText(postPlaceholderText);
        };
        promise().then(function () {
              Assert.elementContains("has result", Caml_option.nullable_to_opt(document.querySelector("#placeholder")), postPlaceholderText);
              done(undefined, undefined);
            });
      }));

exports.placeholderText = placeholderText;
exports.postPlaceholderText = postPlaceholderText;
exports.Hooks = Hooks;
exports.Home = Home;
/*  Not a pure module */
