// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");
var Core__Option = require("@rescript/core/src/Core__Option.res.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

function encodeRequestMethod(requestMethod) {
  if (typeof requestMethod === "object") {
    return requestMethod._0;
  }
  switch (requestMethod) {
    case "Get" :
        return "GET";
    case "Head" :
        return "HEAD";
    case "Post" :
        return "POST";
    case "Put" :
        return "PUT";
    case "Delete" :
        return "DELETE";
    case "Connect" :
        return "CONNECT";
    case "Options" :
        return "OPTIONS";
    case "Trace" :
        return "TRACE";
    case "Patch" :
        return "PATCH";
    
  }
}

var $$AbortController = {};

function encodeReferrerPolicy(referrerPolicy) {
  switch (referrerPolicy) {
    case "None" :
        return "";
    case "NoReferrer" :
        return "no-referrer";
    case "NoReferrerWhenDowngrade" :
        return "no-referrer-when-downgrade";
    case "SameOrigin" :
        return "same-origin";
    case "Origin" :
        return "origin";
    case "StrictOrigin" :
        return "strict-origin";
    case "OriginWhenCrossOrigin" :
        return "origin-when-cross-origin";
    case "StrictOriginWhenCrossOrigin" :
        return "strict-origin-when-cross-origin";
    case "UnsafeUrl" :
        return "unsafe-url";
    
  }
}

var UnknownReferrerPolicy = /* @__PURE__ */Caml_exceptions.create("Fetch.UnknownReferrerPolicy");

var UnknownRequestType = /* @__PURE__ */Caml_exceptions.create("Fetch.UnknownRequestType");

var UnknownRequestDestination = /* @__PURE__ */Caml_exceptions.create("Fetch.UnknownRequestDestination");

function encodeRequestMode(requestMode) {
  switch (requestMode) {
    case "Navigate" :
        return "navigate";
    case "SameOrigin" :
        return "same-origin";
    case "NoCORS" :
        return "no-cors";
    case "CORS" :
        return "cors";
    
  }
}

var UnknownRequestMode = /* @__PURE__ */Caml_exceptions.create("Fetch.UnknownRequestMode");

function encodeRequestCredentials(requestCredentials) {
  switch (requestCredentials) {
    case "Omit" :
        return "omit";
    case "SameOrigin" :
        return "same-origin";
    case "Include" :
        return "include";
    
  }
}

var UnknownRequestCredentials = /* @__PURE__ */Caml_exceptions.create("Fetch.UnknownRequestCredentials");

function encodeRequestCache(requestCache) {
  switch (requestCache) {
    case "Default" :
        return "default";
    case "NoStore" :
        return "no-store";
    case "Reload" :
        return "reload";
    case "NoCache" :
        return "no-cache";
    case "ForceCache" :
        return "force-cache";
    case "OnlyIfCached" :
        return "only-if-cached";
    
  }
}

var UnknownRequestCache = /* @__PURE__ */Caml_exceptions.create("Fetch.UnknownRequestCache");

function encodeRequestRedirect(requestRedirect) {
  switch (requestRedirect) {
    case "Follow" :
        return "follow";
    case "Error" :
        return "error";
    case "Manual" :
        return "manual";
    
  }
}

var UnknownRequestRedirect = /* @__PURE__ */Caml_exceptions.create("Fetch.UnknownRequestRedirect");

var HeadersInit = {};

var $$Headers = {};

var BodyInit = {};

var Body = {};

function make(method_, headers, body, referrer, referrerPolicy, mode, credentials, cache, redirect, integrity, keepalive, signal, param) {
  var tmp = {};
  var tmp$1 = Core__Option.map(method_, encodeRequestMethod);
  if (tmp$1 !== undefined) {
    tmp.method = tmp$1;
  }
  if (headers !== undefined) {
    tmp.headers = Caml_option.valFromOption(headers);
  }
  if (body !== undefined) {
    tmp.body = Caml_option.valFromOption(body);
  }
  if (referrer !== undefined) {
    tmp.referrer = referrer;
  }
  var tmp$2 = Core__Option.map(referrerPolicy, encodeReferrerPolicy);
  if (tmp$2 !== undefined) {
    tmp.referrerPolicy = tmp$2;
  }
  var tmp$3 = Core__Option.map(mode, encodeRequestMode);
  if (tmp$3 !== undefined) {
    tmp.mode = tmp$3;
  }
  var tmp$4 = Core__Option.map(credentials, encodeRequestCredentials);
  if (tmp$4 !== undefined) {
    tmp.credentials = tmp$4;
  }
  var tmp$5 = Core__Option.map(cache, encodeRequestCache);
  if (tmp$5 !== undefined) {
    tmp.cache = tmp$5;
  }
  var tmp$6 = Core__Option.map(redirect, encodeRequestRedirect);
  if (tmp$6 !== undefined) {
    tmp.redirect = tmp$6;
  }
  if (integrity !== undefined) {
    tmp.integrity = integrity;
  }
  if (keepalive !== undefined) {
    tmp.keepalive = keepalive;
  }
  if (signal !== undefined) {
    tmp.signal = Caml_option.valFromOption(signal);
  }
  return tmp;
}

var RequestInit = {
  make: make
};

function method_(self) {
  var requestMethod = self.method;
  switch (requestMethod) {
    case "CONNECT" :
        return "Connect";
    case "DELETE" :
        return "Delete";
    case "GET" :
        return "Get";
    case "HEAD" :
        return "Head";
    case "OPTIONS" :
        return "Options";
    case "PATCH" :
        return "Patch";
    case "POST" :
        return "Post";
    case "PUT" :
        return "Put";
    case "TRACE" :
        return "Trace";
    default:
      return {
              TAG: "Other",
              _0: requestMethod
            };
  }
}

function type_(self) {
  var requestType = self.type;
  switch (requestType) {
    case "" :
        return "None";
    case "audio" :
        return "Audio";
    case "font" :
        return "Font";
    case "image" :
        return "Image";
    case "script" :
        return "Script";
    case "style" :
        return "Style";
    case "track" :
        return "Track";
    case "video" :
        return "Video";
    default:
      throw {
            RE_EXN_ID: UnknownRequestType,
            _1: requestType,
            Error: new Error()
          };
  }
}

function destination(self) {
  var requestDestination = self.destination;
  switch (requestDestination) {
    case "" :
        return "None";
    case "document" :
        return "Document";
    case "embed" :
        return "Embed";
    case "font" :
        return "Font";
    case "image" :
        return "Image";
    case "manifest" :
        return "Manifest";
    case "media" :
        return "Media";
    case "object" :
        return "Object";
    case "report" :
        return "Report";
    case "script" :
        return "Script";
    case "serviceworker" :
        return "ServiceWorker";
    case "sharedworker" :
        return "SharedWorker";
    case "style" :
        return "Style";
    case "worker" :
        return "Worker";
    case "xslt" :
        return "Xslt";
    default:
      throw {
            RE_EXN_ID: UnknownRequestDestination,
            _1: requestDestination,
            Error: new Error()
          };
  }
}

function referrerPolicy(self) {
  var referrerPolicy$1 = self.referrerPolicy;
  switch (referrerPolicy$1) {
    case "" :
        return "None";
    case "no-referrer" :
        return "NoReferrer";
    case "no-referrer-when-downgrade" :
        return "NoReferrerWhenDowngrade";
    case "origin" :
        return "Origin";
    case "origin-when-cross-origin" :
        return "OriginWhenCrossOrigin";
    case "same-origin" :
        return "SameOrigin";
    case "strict-origin" :
        return "StrictOrigin";
    case "strict-origin-when-cross-origin" :
        return "StrictOriginWhenCrossOrigin";
    case "unsafe-url" :
        return "UnsafeUrl";
    default:
      throw {
            RE_EXN_ID: UnknownReferrerPolicy,
            _1: referrerPolicy$1,
            Error: new Error()
          };
  }
}

function mode(self) {
  var requestMode = self.mode;
  switch (requestMode) {
    case "cors" :
        return "CORS";
    case "navigate" :
        return "Navigate";
    case "no-cors" :
        return "NoCORS";
    case "same-origin" :
        return "SameOrigin";
    default:
      throw {
            RE_EXN_ID: UnknownRequestMode,
            _1: requestMode,
            Error: new Error()
          };
  }
}

function credentials(self) {
  var requestCredentials = self.credentials;
  switch (requestCredentials) {
    case "include" :
        return "Include";
    case "omit" :
        return "Omit";
    case "same-origin" :
        return "SameOrigin";
    default:
      throw {
            RE_EXN_ID: UnknownRequestCredentials,
            _1: requestCredentials,
            Error: new Error()
          };
  }
}

function cache(self) {
  var requestCache = self.cache;
  switch (requestCache) {
    case "default" :
        return "Default";
    case "force-cache" :
        return "ForceCache";
    case "no-cache" :
        return "NoCache";
    case "no-store" :
        return "NoStore";
    case "only-if-cached" :
        return "OnlyIfCached";
    case "reload" :
        return "Reload";
    default:
      throw {
            RE_EXN_ID: UnknownRequestCache,
            _1: requestCache,
            Error: new Error()
          };
  }
}

function redirect(self) {
  var requestRedirect = self.redirect;
  switch (requestRedirect) {
    case "error" :
        return "Error";
    case "follow" :
        return "Follow";
    case "manual" :
        return "Manual";
    default:
      throw {
            RE_EXN_ID: UnknownRequestRedirect,
            _1: requestRedirect,
            Error: new Error()
          };
  }
}

var $$Request = {
  method_: method_,
  type_: type_,
  destination: destination,
  referrerPolicy: referrerPolicy,
  mode: mode,
  credentials: credentials,
  cache: cache,
  redirect: redirect
};

var $$Response = {};

exports.$$AbortController = $$AbortController;
exports.HeadersInit = HeadersInit;
exports.$$Headers = $$Headers;
exports.BodyInit = BodyInit;
exports.Body = Body;
exports.RequestInit = RequestInit;
exports.$$Request = $$Request;
exports.$$Response = $$Response;
/* No side effect */
